# -*- coding: utf-8 -*-
"""Overview of Available Datasets.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hGOkAqC0ZjBot8yeIe9bBA1Rd6_VNoz8
"""

import pandas as pd
import pandas as pd
import seaborn as sns
from matplotlib import pyplot as plt

## Dataset from https://www.kaggle.com/datasets/uciml/german-credit
data1 = pd.read_csv('/content/german_credit_data.csv')
data1.head()

from matplotlib import pyplot as plt
import seaborn as sns
data1.groupby('Housing').size().plot(kind='barh', color=sns.palettes.mpl_palette('Dark2'))
plt.gca().spines[['top', 'right',]].set_visible(False)

data1.groupby('Saving accounts').size().plot(kind='barh', color=sns.palettes.mpl_palette('Dark2'))
plt.gca().spines[['top', 'right',]].set_visible(False)

data1.groupby('Checking account').size().plot(kind='barh', color=sns.palettes.mpl_palette('Dark2'))
plt.gca().spines[['top', 'right',]].set_visible(False)

## Dataset from https://www.kaggle.com/laotse/credit-risk-dataset
data2= pd.read_csv("/content/credit_risk_dataset.csv")
data2.head()

data2.groupby('cb_person_default_on_file').size().plot(kind='barh', color=sns.palettes.mpl_palette('Dark2'))
plt.gca().spines[['top', 'right',]].set_visible(False)

data2['person_income'].plot(kind='line', figsize=(8, 4), title='person_income')
plt.gca().spines[['top', 'right']].set_visible(False)

data2['loan_amnt'].plot(kind='hist', bins=20, title='loan_amnt')
plt.gca().spines[['top', 'right',]].set_visible(False)

data2.groupby('loan_grade').size().plot(kind='barh', color=sns.palettes.mpl_palette('Dark2'))
plt.gca().spines[['top', 'right',]].set_visible(False)

data2.groupby('loan_intent').size().plot(kind='barh', color=sns.palettes.mpl_palette('Dark2'))
plt.gca().spines[['top', 'right',]].set_visible(False)

## Dataset from https://www.kaggle.com/datasets/rikdifos/credit-card-approval-prediction
datas1 = pd.read_csv("/content/application_record.csv")
datas2 = pd.read_csv("/content/credit_record.csv")

data3= pd.merge(datas1, datas2, on='ID', how='inner')
data3.head()

data3['AGE_YEARS'] = -data3['DAYS_BIRTH'] // 365
data3['EMPLOYMENT_YEARS'] = -data3['DAYS_EMPLOYED'] // 365

# count plots for categorical variables
def plot_count_plots(df, columns, title_prefix):
    for column in columns:
        plt.figure(figsize=(10, 6))
        sns.countplot(y=column, data=df, palette='Dark2')
        plt.title(f'{title_prefix} - {column}')
        plt.show()

#  line plots for continuous variables
def plot_line_plots(df, columns, title_prefix):
    for column in columns:
        plt.figure(figsize=(10, 6))
        df[column].plot(kind='line', figsize=(10, 6), title=f'{title_prefix} - {column}')
        plt.gca().spines[['top', 'right']].set_visible(False)
        plt.show()

# histograms for continuous variables
def plot_histograms(df, columns, title_prefix):
    for column in columns:
        plt.figure(figsize=(10, 6))
        df[column].plot(kind='hist', bins=20, title=f'{title_prefix} - {column}')
        plt.gca().spines[['top', 'right']].set_visible(False)
        plt.show()

categorical_columns = ['FLAG_OWN_CAR', 'FLAG_OWN_REALTY', 'NAME_HOUSING_TYPE', 'NAME_INCOME_TYPE', 'NAME_EDUCATION_TYPE']
continuous_columns = ['AGE_YEARS', 'AMT_INCOME_TOTAL', 'EMPLOYMENT_YEARS']

plot_count_plots(data3, categorical_columns, 'Data3')
plot_line_plots(data3, ['AMT_INCOME_TOTAL'], 'Data3')
plot_histograms(data3, ['AGE_YEARS', 'EMPLOYMENT_YEARS'], 'Data3')
plot_count_plots(data3, ['NAME_FAMILY_STATUS'], 'Data3')

"""# Comparison of columns

**German dataset**

| Column Name        | Description                                                               |
|--------------------|---------------------------------------------------------------------------|
| Age                | numeric                                                                   |
| Sex                | text: male, female                                                        |
| Job                | numeric: 0 - unskilled and non-resident, 1 - unskilled and resident,      |
|                    | 2 - skilled, 3 - highly skilled                                           |
| Housing            | text: own, rent, or free                                                  |
| Saving accounts    | text: little, moderate, quite rich, rich                                  |
| Checking account   | numeric, in DM (Deutsch Mark)                                             |
| Credit amount      | numeric, in DM                                                            |
| Duration           | numeric, in month                                                         |
| Purpose            | text: car, furniture/equipment, radio/TV, domestic appliances, repairs,  |
|                    | education, business, vacation/others                                      |

**Credit Risk dataset**

| Column Name                   | Description                                                                   |
|-------------------------------|-------------------------------------------------------------------------------|
| person_age                    | Age                                                                          |
| person_income                 | Annual Income                                                                |
| person_home_ownership         | Home ownership                                                               |
| person_emp_length             | Employment length (in years)                                                 |
| loan_intent                   | Loan intent                                                                  |
| loan_grade                    | Loan grade                                                                   |
| loan_amnt                     | Loan amount                                                                  |
| loan_int_rate                 | Interest rate                                                                |
| loan_status                   | Loan status (0 is non-default, 1 is default)                                 |
| loan_percent_income           | Percent income                                                               |
| cb_person_default_on_file     | Historical default                                                           |
| cb_preson_cred_hist_length    | Credit history length                                                        |

**Credit Card approval**

| Column Name           | Description                                           |
|-----------------------|-------------------------------------------------------|
| ID                    | Unique identifier for each record                     |
| Client number         | Client's unique identification number                 |
| CODE_GENDER           | Gender of the client (M for male, F for female)   XX    |
| FLAG_OWN_CAR          | Indicates whether the client owns a car (Y or N)      |
| FLAG_OWN_REALTY       | Indicates whether the client owns real estate (Y or N)|
| CNT_CHILDREN          | Number of children the client has                     |
| AMT_INCOME_TOTAL      | Annual income of the client                           |
| NAME_INCOME_TYPE      | Category of the client's income                       |
| NAME_EDUCATION_TYPE   | Level of education of the client  ??                    |
| NAME_FAMILY_STATUS    | Marital status of the client                          |
| NAME_HOUSING_TYPE     | Type of housing the client lives in                   |
| DAYS_BIRTH            | Count backwards from the current day (0) of client's birthday (-1 means yesterday) ?? |
| DAYS_EMPLOYED         | Count backwards from the current day (0) of client's employment start date (positive values indicate unemployed) |
| FLAG_MOBIL            | Indicates whether the client has a mobile phone (1 for yes, 0 for no) XX +++ VALEUR UNIQUE 1 |
| FLAG_WORK_PHONE       | Indicates whether the client has a work phone (1 for yes, 0 for no)XX |
| FLAG_PHONE            | Indicates whether the client has a phone (1 for yes, 0 for no)XX |
| FLAG_EMAIL            | Indicates whether the client has an email (1 for yes, 0 for no)xx |
| OCCUPATION_TYPE       | Occupation of the client                              |
| CNT_FAM_MEMBERS       | Number of family members of the client               |
| MONTHS_BALANCE        | The month of the extracted data is the starting point, backwards, 0 is the current month, -1 is the previous month, and so on |
| STATUS                | 0: 1-29 days past due 1: 30-59 days past due 2: 60-89 days overdue 3: 90-119 days overdue 4: 120-149 days overdue 5: Overdue or bad debts, write-offs for more than 150 days C: paid off that month X: No loan for the month |
"""

## German Dataset
quantitative_col = data1.select_dtypes(include=['int64','float64']).columns.tolist()
print("\nQuantitative Columns in German dataset :", quantitative_col, "\n Number of Columns in German dataset:", len(quantitative_col))
categorical_cols = data1.select_dtypes(include=['object']).columns.tolist()
print("\nCategorical Columns in German dataset :", categorical_cols, "\n Number of Columns in German dataset:", len(categorical_cols))
print("\nTotal Number:", len(categorical_cols)+len(quantitative_col))
## Credit Risk
quantitative_col = data2.select_dtypes(include=['int64','float64']).columns.tolist()
print("\nQuantitative Columns in Credit risk :", quantitative_col, "\n Number of Columns in Credit risk dataset:", len(quantitative_col))
categorical_cols = data2.select_dtypes(include=['object']).columns.tolist()
print("\nCategorical Columns in Credit risk :", categorical_cols, "\n Number of Columns in Credit risk dataset:", len(categorical_cols))
print("\nTotal Number:", len(categorical_cols)+len(quantitative_col))
## Credit Card
quantitative_col = data3.select_dtypes(include=['int64','float64']).columns.tolist()
print("\nQuantitative Columns in Credit Card :", quantitative_col, "\n Number of Columns in Credit Card dataset:", len(quantitative_col))
categorical_cols = data3.select_dtypes(include=['object']).columns.tolist()
print("\nCategorical Columns in Credit Card :", categorical_cols, "\n Number of Columns in Credit Card dataset:", len(categorical_cols))
print("\nTotal Number:", len(categorical_cols)+len(quantitative_col))

"""Credit card df is the dataset with the most of columns. Moreover, we don't need all the columns as we want to only keep some features. Features as gender is not important in our study. However, the age of the applicant may be important, as it is obviously conceivable that as a person gets older, they will have higher and/or more recurrent healthcare costs. There is also a greater chance that the person will die and not repay the loan.

# Missing values
"""

def missing_data_comparison_three(df1, df2, df3):
    print("Missing values in Dataset 1:")
    print(df1.isnull().sum()[df1.isnull().sum() > 0])
    print("\nMissing values in Dataset 2:")
    print(df2.isnull().sum()[df2.isnull().sum() > 0])
    print("\nMissing values in Dataset 3:")
    print(df3.isnull().sum()[df3.isnull().sum() > 0])
missing_data_comparison_three(data1, data2, data3)

"""# Features comparison"""

# Convert DAYS_BIRTH and DAYS_EMPLOYED to years in data3
data3['AGE_YEARS'] = -data3['DAYS_BIRTH'] // 365
data3['EMPLOYMENT_YEARS'] = -data3['DAYS_EMPLOYED'] // 365

# descriptive statistics
def descriptive_statistics_comparison_three(df1, df2, df3, columns1, columns2, columns3):
    print("\nDescriptive Statistics for Dataset 1 (German Credit Data):")
    print(df1[columns1].describe(include='all'))
    print("\nDescriptive Statistics for Dataset 2 (Credit Risk Dataset):")
    print(df2[columns2].describe(include='all'))
    print("\nDescriptive Statistics for Dataset 3 (Combined Application and Credit Record):")
    print(df3[columns3].describe(include='all'))

# columns to be used in the comparison
columns1 = ['Age', 'Credit amount']
columns2 = ['person_age', 'person_income', 'person_emp_length', 'loan_amnt']
columns3 = ['AGE_YEARS', 'AMT_INCOME_TOTAL', 'EMPLOYMENT_YEARS']

descriptive_statistics_comparison_three(data1, data2, data3, columns1, columns2, columns3)

def plot_distributions(df1, df2, df3, column1, column2, column3):
    fig, axes = plt.subplots(1, 3, figsize=(18, 5))
    sns.histplot(df1[column1], ax=axes[0], kde=True).set_title('German Credit Data')
    sns.histplot(df2[column2], ax=axes[1], kde=True).set_title('Credit Risk Dataset')
    sns.histplot(df3[column3], ax=axes[2], kde=True).set_title('Combined Application and Credit Record')
plot_distributions(data1, data2, data3, 'Age', 'person_age', 'AGE_YEARS')

"""
German Credit Data:

The age distribution shows a peak around 30-35 years old.
It has a relatively normal distribution, with fewer individuals as age increases beyond this peak.

Credit Risk Dataset:

This dataset shows a sharp peak around 20-25 years old.
The distribution is heavily skewed towards younger ages, with very few individuals above 40 years old.

Credit card Record:

The age distribution is more uniformly spread between 20 and 60 years old.
There is a noticeable decline in the number of individuals as age increases beyond 60"""

plot_distributions(data1, data2, data3, 'Credit amount', 'loan_amnt', 'AMT_INCOME_TOTAL')

"""German Credit Data:

The credit amount distribution shows a peak around 2000-3000 DM.
There are a few high-value outliers beyond 10000 DM.

Credit Risk Dataset:

The loan amount distribution has multiple peaks, indicating possible clustering at certain loan amounts.
The distribution is fairly spread out with several peaks up to 35000.

Combined Application and Credit Record:

The income distribution shows a wide range with a significant number of high-income individuals.
There is a high concentration of individuals with income below 200000, with few outliers above this threshold.
"""

plot_distributions(data1, data2, data3, 'Age', 'person_emp_length', 'EMPLOYMENT_YEARS')

"""German Credit Data:

Employment length data is not available for this dataset.

Credit Risk Dataset:

Employment length shows a peak around 0-5 years, indicating many individuals are early in their careers.
There is a long tail with fewer individuals having employment length beyond 20 years.

Combined Application and Credit Record:

Employment length shows a high concentration around short employment periods, with negative values indicating unemployment.
There are very few individuals with long employment periods, and the data might need cleaning for negative values.

"""

def correlation_comparison_three(df1, df2, df3, columns1, columns2, columns3):
    fig, axes = plt.subplots(1, 3, figsize=(18, 5))
    sns.heatmap(df1[columns1].corr(), ax=axes[0], annot=True, cmap='coolwarm').set_title('German Credit Data')
    sns.heatmap(df2[columns2].corr(), ax=axes[1], annot=True, cmap='coolwarm').set_title('Credit Risk Dataset')
    sns.heatmap(df3[columns3].corr(), ax=axes[2], annot=True, cmap='coolwarm').set_title('Combined Application and Credit Record')
correlation_comparison_three(data1, data2, data3, columns1, columns2, columns3)

"""German Credit Data:

Weak correlation between age and credit amount.
Indicates that age has minimal impact on the credit amount in this dataset.

Credit Risk Dataset:

Moderate correlation between income and loan amount.
Slight positive correlations between age, employment length, and other financial metrics.

Combined Application and Credit Record:

Strong negative correlation between age and employment years (older individuals have longer employment history).
Positive correlation between income and employment years.

"""

# dimensionality reduction comparison
from sklearn.decomposition import PCA

def pca_analysis(df1, df2, df3, columns1, columns2, columns3):
    pca1 = PCA().fit(df1[columns1].select_dtypes(include=[float, int]).dropna())
    pca2 = PCA().fit(df2[columns2].select_dtypes(include=[float, int]).dropna())
    pca3 = PCA().fit(df3[columns3].select_dtypes(include=[float, int]).dropna())

    fig, axes = plt.subplots(1, 3, figsize=(18, 5))
    axes[0].plot(pca1.explained_variance_ratio_.cumsum())
    axes[0].set_title('PCA Cumulative Explained Variance - German Credit Data')
    axes[1].plot(pca2.explained_variance_ratio_.cumsum())
    axes[1].set_title('PCA Cumulative Explained Variance - Credit Risk Dataset')
    axes[2].plot(pca3.explained_variance_ratio_.cumsum())
    axes[2].set_title('PCA Cumulative Explained Variance - Combined Application and Credit Record')
    plt.show()

pca_analysis(data1, data2, data3, columns1, columns2, columns3)

"""German Credit Data:

The first principal component explains almost all variance in the dataset.
Suggests that a single underlying factor captures most of the data's variability.

Credit Risk Dataset:

Similar to the German Credit Data, the first principal component explains nearly all variance.
Indicates a single dominant factor in the dataset.

Combined Application and Credit Record:

The first principal component captures almost all variance, with a slight increase by the second component.
Suggests a strong underlying factor with a minor secondary factor.
"""